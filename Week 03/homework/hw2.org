#+AUTHOR: 
#+TITLE: CS131: Homework 2, Naive parsing of context free grammars

* Grammar converter
#+BEGIN_SRC ocaml :tangle hw2.ml
(* get left hand sides helper function *)
let rec get_lhs =
  (* function that checks for duplicate *)
  let rec is_duplicate item list = match list with
  | [] -> false
  | hd :: tl -> if (item = hd) then true
                else is_duplicate item tl in

  (* function for retrieving expressions in a tuple *)
  let return_expression = function
    | (a, b) -> a in

  (* main function for retrieving expressions *)
  function     | [] -> []
               | hd :: tl ->
                  match hd, tl with
                  | (l, r) ->
                     let lhs = get_lhs tl in
                     let curr_expr = return_expression(l) in

                     (* check to see if the expression is a duplicate *)
                     if (is_duplicate curr_expr lhs) then lhs
                     (* if it isn't then add it to our list of expressions *)
                     else curr_expr :: lhs
;;
#+END_SRC

#+BEGIN_SRC ocaml :tangle hw2.ml
(* collect rules *)
let rec collect_rhs r lhs = 
     (* helper for extracting rule *)
     let get_rule = function
       | (a, b) -> b in

     let get_category = function
       | (a, b) -> a in     
     (* helper for matching left side*)
     let matches_lhs a b = (a = b) in

     match r with
     | [] -> []
     | hd :: tl ->
        let rules = collect_rhs tl lhs in
        if (matches_lhs lhs (get_category hd)) then (get_rule hd) :: rules
        else rules 
;;  

#+END_SRC

#+BEGIN_SRC ocaml :tangle hw2.ml
(* convert grammar function *)
let convert_grammar = function
  | (a, b) -> (a, collect_rhs b)
;;
#+END_SRC

* Matcher

With the first function written, we can turn our attention to the main part
of the assignment, writing the /parse_prefix/ function. This function will
return a matcher for the argument /gram/.

** Prefix checker function
Our matcher will require a function that will check to see if a prefix
is legal, i.e., given a string $xy$, our prefix checker function
will tell us if $x$ is a valid prefix. There may be symbols left over
in the prefix, and we'll need some way of carrying those symbols over
to the suffix.

** Retrieving prefixes and suffixes
Before we can write a function to check prefixes, we'll need a
function that will retrieve all the possible prefixes we can generate
from an input string. Furthermore, given any prefix, we'll need its
corresponding suffix too. Thus, we'll need a function that splits a
list of terminal symbols into a list of prefixes and
suffixes. Finally, there are many ways to implement this function;
however, we should make sure to grab longer prefixes before we grab
shorter ones.

Let's write the function. It should take in a list of terminal symbols
and return a list of lists containing prefixes and suffixes. We'll
need to know how long a list is before we can split it, so we'll need
a helper function that walks through the list and gets its length.

#+BEGIN_SRC ocaml :tangle hw2.ml
let rec get_list_length =
  let list_length = get_list_length in
  function
  | [] -> 0
  | hd :: tl -> 1 + list_length tl
;;
#+END_SRC

With that helper function completed, we need to write a function that
takes a list and an integer, and splits that list recursively into
prefixes and suffixes
